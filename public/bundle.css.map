{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/components/HelloWorld.svelte",
    "../src/components/WorstParagraph.svelte",
    "../src/concepts/Events.svelte",
    "../src/concepts/Lifecycle.svelte",
    "../src/concepts/Bindings.svelte",
    "../src/concepts/Other.svelte",
    "../src/concepts/nested/Thing.svelte",
    "../src/concepts/nested/FancyButton.svelte",
    "../src/concepts/nested/Keypad.svelte"
  ],
  "sourcesContent": [
    "<script>\n  export let name;\n</script>\n\n<style>\n  h1 {\n    color: hotpink;\n  }\n</style>\n\n<!--like handlebars but with one less set of {}-->\n<h1>Hello {name.toUpperCase()}!</h1>\n",
    "<script>\n  import Nested from \"./Nested.svelte\";\n</script>\n\n<style>\n  /*styles are scoped to the component*/\n  p {\n    color: purple;\n    font-family: \"Comic Sans MS\";\n    font-size: 2em;\n  }\n</style>\n\n<p>This is the worst paragraph.</p>\n<Nested />\n",
    "<script>\n  let m = { x: 0, y: 0 };\n\n  function handleMousemove(event) {\n    m.x = event.clientX;\n    m.y = event.clientY;\n  }\n\n  function handleButtonClick() {\n    alert(\"no more alerts\");\n  }\n\n  import Outer from \"./nested/Outer.svelte\";\n\n  function handleMessage(event) {\n    alert(event.detail.text);\n  }\n\n  import FancyButton from \"./nested/FancyButton.svelte\";\n\n  function handleClick() {\n    alert(\"clicked\");\n  }\n</script>\n\n<style>\n  div {\n    width: 25%;\n    height: 25%;\n  }\n</style>\n\n<h2>Events</h2>\n<!--with click handler function-->\n<div on:mousemove={handleMousemove}>The mouse position is {m.x} x {m.y}</div>\n<!--with inline click handler-->\n<div on:mousemove={e => (m = { x: e.clientX, y: e.clientY })}>\n  The mouse position is {m.x} x {m.y}\n</div>\n<!--event modifiers include: preventDefault, stopPropagation, passive, capture, once, self-->\n<button on:click|once={handleButtonClick}>Click me</button>\n<!--nested components must forward events-->\n<Outer on:message={handleMessage} />\n<!--DOM events can also be forwarded-->\n<FancyButton on:click={handleClick} />\n",
    "<script>\n  import { onMount } from \"svelte\";\n\n  let photos = [];\n\n  //recommended to put fetch in onMount\n  onMount(async () => {\n    const res = await fetch(\n      `https://jsonplaceholder.typicode.com/photos?_limit=20`\n    );\n    photos = await res.json();\n  });\n\n  import { onDestroy } from \"svelte\";\n\n  let seconds = 0;\n  const interval = setInterval(() => (seconds += 1), 1000);\n\n  onDestroy(() => clearInterval(interval));\n</script>\n\n<style>\n  .photos {\n    width: 100%;\n    display: grid;\n    grid-template-columns: repeat(5, 1fr);\n    grid-gap: 8px;\n  }\n\n  figure,\n  img {\n    width: 100%;\n    margin: 0;\n  }\n</style>\n\n<h2>On Mount</h2>\n<div>Runs after the component is first rendered in the DOM</div>\n<h1>Photo album</h1>\n\n<div class=\"photos\">\n  {#each photos as photo}\n    <figure>\n      <img src={photo.thumbnailUrl} alt={photo.title} />\n      <figcaption>{photo.title}</figcaption>\n    </figure>\n  {:else}\n    <!-- this block renders when photos.length === 0 -->\n    <p>loading...</p>\n  {/each}\n</div>\n\n<h2>On Destroy</h2>\n<div>Runs when component is destroyed</div>\n\n<p>\n  The page has been open for {seconds} {seconds === 1 ? 'second' : 'seconds'}\n</p>\n\n<h2>Before Update & After Update</h2>\n<div>\n  Before Update runs immediately before the DOM is updated - don't forget to\n  check to make sure the DOM element exists!\n</div>\n<div>After Update runs once the DOM has been updated with the new data</div>\n",
    "<script>\n  let name = \"world\";\n\n  let a = 1;\n  let b = 2;\n\n  let yes = false;\n\n  let scoops = 1;\n  let flavours = [\"Mint choc chip\"];\n  let menu = [\"Cookies and cream\", \"Mint choc chip\", \"Raspberry ripple\"];\n\n  function join(flavours) {\n    if (flavours.length === 1) return flavours[0];\n    return `${flavours.slice(0, -1).join(\", \")} and ${\n      flavours[flavours.length - 1]\n    }`;\n  }\n\n  let value = `Some words are *italic*, some are **bold**`;\n\n  let questions = [\n    { id: 1, text: `Where did you go to school?` },\n    { id: 2, text: `What is your mother's name?` },\n    {\n      id: 3,\n      text: `What is another personal fact that an attacker could easily find with Google?`\n    }\n  ];\n\n  let selected;\n\n  let answer = \"\";\n\n  function handleSubmit() {\n    alert(\n      `answered question ${selected.id} (${selected.text}) with \"${answer}\"`\n    );\n  }\n\n  let todos = [\n    { done: false, text: \"finish Svelte tutorial\" },\n    { done: false, text: \"build an app\" },\n    { done: false, text: \"world domination\" }\n  ];\n\n  function add() {\n    todos = todos.concat({ done: false, text: \"\" });\n  }\n\n  function clear() {\n    todos = todos.filter(t => !t.done);\n  }\n\n  $: remaining = todos.filter(t => !t.done).length;\n\n  import Keypad from \"./nested/Keypad.svelte\";\n\n  let pin;\n  $: view = pin ? pin.replace(/\\d(?!$)/g, \"â€¢\") : \"enter your pin\";\n\n  function handlePinSubmit() {\n    alert(`submitted ${pin}`);\n  }\n</script>\n\n<style>\n  textarea {\n    width: 100%;\n    height: 200px;\n  }\n\n  input {\n    display: block;\n    width: 500px;\n    max-width: 100%;\n  }\n\n  .done {\n    opacity: 0.4;\n  }\n</style>\n\n<h2>Bindings</h2>\n<input bind:value={name} />\n<h3>Hello {name}!</h3>\n\n<!--can coerce numeric inputs to numbers instead of strings with bind:value-->\n<label>\n  <input type=\"number\" bind:value={a} min=\"0\" max=\"10\" />\n  <input type=\"range\" bind:value={a} min=\"0\" max=\"10\" />\n</label>\n\n<label>\n  <input type=\"number\" bind:value={b} min=\"0\" max=\"10\" />\n  <input type=\"range\" bind:value={b} min=\"0\" max=\"10\" />\n</label>\n\n<p>{a} + {b} = {a + b}</p>\n\n<!--need to bind:checked instead of bind:value for checkboxes-->\n<label>\n  <input type=\"checkbox\" bind:checked={yes} />\n  Yes! Send me regular email spam\n</label>\n\n{#if yes}\n  <p>Thank you. We will bombard your inbox and sell your personal details.</p>\n{:else}\n  <p>You must opt in to continue. If you're not paying, you're the product.</p>\n{/if}\n\n<button disabled={!yes}>Subscribe</button>\n\n<!--binding example for radio buttons and checkboxes-->\n<h3>Size</h3>\n\n<label>\n  <input type=\"radio\" bind:group={scoops} value={1} />\n  One scoop\n</label>\n\n<label>\n  <input type=\"radio\" bind:group={scoops} value={2} />\n  Two scoops\n</label>\n\n<label>\n  <input type=\"radio\" bind:group={scoops} value={3} />\n  Three scoops\n</label>\n\n<h3>Flavours</h3>\n{#each menu as flavour}\n  <label>\n    <input type=\"checkbox\" bind:group={flavours} value={flavour} />\n    {flavour}\n  </label>\n{/each}\n\n{#if flavours.length === 0}\n  <p>Please select at least one flavour</p>\n{:else if flavours.length > scoops}\n  <p>Can't order more flavours than scoops!</p>\n{:else}\n  <p>\n    You ordered {scoops} {scoops === 1 ? 'scoop' : 'scoops'} of {join(flavours)}\n  </p>\n{/if}\n\n<!--binding example for textarea-->\n<textarea bind:value />\n\n{@html value}\n\n<!--binding example for dropdown/select input-->\n<h3>Insecurity questions</h3>\n\n<form on:submit|preventDefault={handleSubmit}>\n  <select bind:value={selected} on:change={() => (answer = '')}>\n    {#each questions as question}\n      <option value={question}>{question.text}</option>\n    {/each}\n  </select>\n\n  <input bind:value={answer} />\n\n  <button disabled={!answer} type=\"submit\">Submit</button>\n</form>\n\n<p>selected question {selected ? selected.id : '[waiting...]'}</p>\n\n<!--can also use select multiple-->\n<!--<select multiple bind:value={flavours}>\n\t{#each menu as flavour}\n\t\t<option value={flavour}>\n\t\t\t{flavour}\n\t\t</option>\n\t{/each}\n</select>-->\n\n<!--can bind to properties inside an each block-->\n<h3>Todos</h3>\n\n{#each todos as todo}\n  <div class:done={todo.done}>\n    <input type=\"checkbox\" bind:checked={todo.done} />\n\n    <input placeholder=\"What needs to be done?\" bind:value={todo.text} />\n  </div>\n{/each}\n\n<p>{remaining} remaining</p>\n\n<button on:click={add}>Add new</button>\n\n<button on:click={clear}>Clear completed</button>\n\n<!--can also bind to component props-->\n<h3 style=\"color: {pin ? '#333' : '#ccc'}\">{view}</h3>\n\n<Keypad bind:value={pin} on:submit={handlePinSubmit} />\n",
    "<script>\n  let current = \"baz\";\n  let big = false;\n\n  import { onMount } from \"svelte\";\n\n  let characters = [\"ðŸ¥³\", \"ðŸŽ‰\", \"âœ¨\"];\n  let toggled = false;\n\n  function toggle() {\n    toggled = !toggled;\n  }\n\n  let confetti = new Array(100).fill().map((_, i) => {\n    return {\n      character: characters[i % characters.length],\n      x: Math.random() * 100,\n      y: -20 - Math.random() * 100,\n      r: 0.1 + Math.random() * 1\n    };\n  });\n  confetti.sort((a, b) => a.r - b.r);\n\n  onMount(() => {\n    let frame;\n\n    function loop() {\n      frame = requestAnimationFrame(loop);\n\n      confetti = confetti.map(emoji => {\n        emoji.y += 0.7 * emoji.r;\n        if (emoji.y > 120) emoji.y = -20;\n        return emoji;\n      });\n    }\n\n    loop();\n\n    return () => cancelAnimationFrame(frame);\n  });\n</script>\n\n<style>\n  button {\n    display: block;\n  }\n\n  .active {\n    background-color: #ff3e00;\n    color: white;\n  }\n\n  .big {\n    font-size: 4em;\n  }\n\n  div {\n    position: absolute;\n    top: -5000px;\n    font-size: 5vw;\n  }\n</style>\n\n<h2>Classes</h2>\n<button\n  class={current === 'bar' ? 'active' : ''}\n  on:click={() => (current = 'bar')}>\n  bar\n</button>\n\n<!--there's a shorthand syntax for dynamic classes-->\n<button class:active={current === 'baz'} on:click={() => (current = 'baz')}>\n  baz\n</button>\n\n<!--there's also a super-shorthand syntax-->\n<label>\n  <input type=\"checkbox\" bind:checked={big} />\n  big\n</label>\n\n<div class:big>some {big ? 'big' : 'small'} text</div>\n\n<h2>Debugging</h2>\n<div>Can use @debug to debug in the browser</div>\n\n<h2>Animations, Motions, Transitions</h2>\n{#if toggled}\n  <button on:click={toggle}>Turn off</button>\n{:else}\n  <button on:click={toggle}>Turn on confetti</button>\n{/if}\n{#if toggled}\n  {#each confetti as c}\n    <div style=\"left: {c.x}%; top: {c.y}%; transform: scale({c.r})\">\n      {c.character}\n    </div>\n  {/each}\n{/if}\n",
    "<script>\n  // `current` is updated whenever the prop value changes...\n  export let current;\n\n  // ...but `initial` is fixed upon initialisation\n  const initial = current;\n</script>\n\n<style>\n  span {\n    display: inline-block;\n    padding: 0.2em 0.5em;\n    margin: 0 0.2em 0.2em 0;\n    width: 4em;\n    text-align: center;\n    border-radius: 0.2em;\n    color: white;\n  }\n</style>\n\n<p>\n  <span style=\"background-color: {initial}\">initial</span>\n  <span style=\"background-color: {current}\">current</span>\n</p>\n",
    "<style>\n  button {\n    font-family: \"Comic Sans MS\";\n    font-size: 2em;\n    padding: 0.5em 1em;\n    color: royalblue;\n    background: gold;\n    border-radius: 1em;\n    box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);\n  }\n</style>\n\n<button on:click>Click me</button>\n",
    "<script>\n  import { createEventDispatcher } from \"svelte\";\n\n  export let value = \"\";\n\n  const dispatch = createEventDispatcher();\n\n  const select = num => () => (value += num);\n  const clear = () => (value = \"\");\n  const submit = () => dispatch(\"submit\");\n</script>\n\n<style>\n  .keypad {\n    display: grid;\n    grid-template-columns: repeat(3, 5em);\n    grid-template-rows: repeat(4, 3em);\n    grid-gap: 0.5em;\n  }\n\n  button {\n    margin: 0;\n  }\n</style>\n\n<div class=\"keypad\">\n  <button on:click={select(1)}>1</button>\n  <button on:click={select(2)}>2</button>\n  <button on:click={select(3)}>3</button>\n  <button on:click={select(4)}>4</button>\n  <button on:click={select(5)}>5</button>\n  <button on:click={select(6)}>6</button>\n  <button on:click={select(7)}>7</button>\n  <button on:click={select(8)}>8</button>\n  <button on:click={select(9)}>9</button>\n\n  <button disabled={!value} on:click={clear}>clear</button>\n  <button on:click={select(0)}>0</button>\n  <button disabled={!value} on:click={submit}>submit</button>\n</div>\n"
  ],
  "names": [],
  "mappings": "AAKE,EAAE,cAAC,CAAC,AACF,KAAK,CAAE,OAAO,AAChB,CAAC;ACDD,CAAC,cAAC,CAAC,AACD,KAAK,CAAE,MAAM,CACb,WAAW,CAAE,eAAe,CAC5B,SAAS,CAAE,GAAG,AAChB,CAAC;ACgBD,GAAG,aAAC,CAAC,AACH,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,GAAG,AACb,CAAC;ACPD,OAAO,eAAC,CAAC,AACP,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CACrC,QAAQ,CAAE,GAAG,AACf,CAAC,AAED,qBAAM,CACN,GAAG,eAAC,CAAC,AACH,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,CAAC,AACX,CAAC;ACkCD,QAAQ,cAAC,CAAC,AACR,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,AACf,CAAC,AAED,KAAK,cAAC,CAAC,AACL,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,KAAK,CACZ,SAAS,CAAE,IAAI,AACjB,CAAC,AAED,KAAK,cAAC,CAAC,AACL,OAAO,CAAE,GAAG,AACd,CAAC;ACrCD,MAAM,eAAC,CAAC,AACN,OAAO,CAAE,KAAK,AAChB,CAAC,AAED,OAAO,eAAC,CAAC,AACP,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,KAAK,AACd,CAAC,AAED,IAAI,eAAC,CAAC,AACJ,SAAS,CAAE,GAAG,AAChB,CAAC,AAED,GAAG,eAAC,CAAC,AACH,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,OAAO,CACZ,SAAS,CAAE,GAAG,AAChB,CAAC;ACnDD,IAAI,cAAC,CAAC,AACJ,OAAO,CAAE,YAAY,CACrB,OAAO,CAAE,KAAK,CAAC,KAAK,CACpB,MAAM,CAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CACvB,KAAK,CAAE,GAAG,CACV,UAAU,CAAE,MAAM,CAClB,aAAa,CAAE,KAAK,CACpB,KAAK,CAAE,KAAK,AACd,CAAC;AChBD,MAAM,eAAC,CAAC,AACN,WAAW,CAAE,eAAe,CAC5B,SAAS,CAAE,GAAG,CACd,OAAO,CAAE,KAAK,CAAC,GAAG,CAClB,KAAK,CAAE,SAAS,CAChB,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,AAC5C,CAAC;ACID,OAAO,eAAC,CAAC,AACP,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CACrC,kBAAkB,CAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAClC,QAAQ,CAAE,KAAK,AACjB,CAAC,AAED,MAAM,eAAC,CAAC,AACN,MAAM,CAAE,CAAC,AACX,CAAC"
}